 #-*- coding: utf-8 -*- 

from email.policy import default
import os
from re import A
import sys
import subprocess
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *
import pandas as pd
import pypyodbc
from sqlalchemy import create_engine, true
import folium
import data
#from fastkml.kml import *
import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Element, dump, ElementTree

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


class App(QWidget):

    def __init__(self):
        super().__init__()
        self.TITLE  = "망계획도구"
        self.LEFT   = 150
        self.TOP    = 100
        self.WIDTH  = 1600
        self.HEIGHT = 800
        self.SIZE = 40
        self.setupUI()


    def setupUI(self):
        self.setWindowTitle(self.TITLE)
        self.setWindowIcon(QIcon('./img/favicon.png'))
        self.setGeometry(self.LEFT, self.TOP, self.WIDTH, self.HEIGHT)

        # 로고
        self.lbl_sv_logo = QLabel(self)
        self.lbl_sv_logo.setPixmap(QPixmap('./img/solvit_logo.png'))
        self.lbl_sv_logo.setFixedHeight(50)
        self.lbl_sv_logo.setFixedWidth(140)

        groupHL=QGridLayout()
        groupHL.addWidget(self.createHCTRgroup(),0,0)
        groupHL.addWidget(self.createLCTRgroup(),2,0)

        # "종료" 버튼
        self.exitBtn = QPushButton("프로그램 종료")
        self.exitBtn.setFixedHeight(self.SIZE)
        self.exitBtn.clicked.connect(self.exitBtnClicked)

        # "테스트" 버튼
        self.testBtn = QPushButton("테스트(커버리지 가시화)")
        self.testBtn.setFixedHeight(self.SIZE)
        self.testBtn.clicked.connect(self.testBtnClicked)
        
        # "노드 추가" 버튼
        self.addNode = QPushButton("노드 추가")
        self.addNode.setFixedHeight(self.SIZE)
        self.addNode.setFixedWidth(100)
        self.addNode.clicked.connect(self.addNodeBtnClicked)
        
        # "노드 삭제" 버튼
        self.delNode = QPushButton("노드 삭제")
        self.delNode.setFixedHeight(self.SIZE)
        self.delNode.setFixedWidth(100)
        self.delNode.clicked.connect(self.delNodeBtnClicked)
        
        # "노드 저장" 버튼
        self.dbsave = QPushButton("저장")
        self.dbsave.setFixedHeight(self.SIZE)
        self.dbsave.setFixedWidth(100)
        self.dbsave.clicked.connect(self.dbsaveBtnClicked)

        # 좌측 메뉴 레이아웃 설정        
        lvLay = QVBoxLayout()
        lvLay.addWidget(self.lbl_sv_logo)
        lvLay.addSpacing(self.SIZE)
        lvLay.addWidget(self.createHCTRgroup())
        lvLay.addStretch(1)
        lvLay.addWidget(self.createLCTRgroup())
        lvLay.addStretch(1)
        lvLay.addWidget(self.testBtn)
        lvLay.addWidget(self.exitBtn)

        # 지도
        self.web = QWebEngineView()

        # 테이블
        self.tableColumn = []
        self.tableWidget = QTableWidget()
        
        # 우측 하단, 노드 추가, 노드 삭제, 저장 버튼 레이아웃 설정
        hbox = QHBoxLayout()
        hbox.addStretch(1)
        hbox.addWidget(self.addNode)
        hbox.addWidget(self.delNode)
        hbox.addWidget(self.dbsave)

        # 우측 지도, 테이블 레이아웃 설정
        rvLay = QVBoxLayout()
        rvLay.addWidget(self.web)
        rvLay.setStretchFactor(self.web, 8)
        rvLay.addWidget(self.tableWidget)
        rvLay.setStretchFactor(self.tableWidget, 4)
        rvLay.addLayout(hbox)

        # table double clicked
        #self.tableWidget.doubleClicked.connect(self.tblCellDblClicked)

        # main Layout
        mainLay = QHBoxLayout()
        mainLay.addLayout(lvLay)
        mainLay.addLayout(rvLay)

        # layout 세팅
        self.setLayout(mainLay)
    
    def createHCTRgroup(self):
        groupbox=QGroupBox("대용량전송장치(HCTR)")

        # 시나리오 생성 버튼
        clickbtn0=QPushButton("시나리오 파일 생성")
        clickbtn0.setFixedHeight(self.SIZE)
        clickbtn0.clicked.connect(self.newScenBtnClicked)
        
        # csv 임포팅 버튼
        clickbtn1=QPushButton("시나리오 파일 열기")
        clickbtn1.setFixedHeight(self.SIZE)
        clickbtn1.clicked.connect(self.csvOpenBtnClicked)

        # "htz 분석 시작" 버튼
        clickbtn2 = QPushButton("커버리지 분석")
        clickbtn2.setFixedHeight(self.SIZE)
        clickbtn2.clicked.connect(self.covBtnClicked)

        # "링크 분석 시작" 버튼
        clickbtn3 = QPushButton("링크 연결성 분석")
        clickbtn3.setFixedHeight(self.SIZE)
        clickbtn3.clicked.connect(self.linkBtnClicked)
                
        # "중계소배치 시작" 버튼
        clickbtn4 = QPushButton("중계소 배치")
        clickbtn4.setFixedHeight(self.SIZE)
        clickbtn4.clicked.connect(self.nodeBtnClicked)

        # "주파수 할당 시작" 버튼
        clickbtn5 = QPushButton("주파수 할당")
        clickbtn5.setFixedHeight(self.SIZE)
        clickbtn5.clicked.connect(self.freqBtnClicked)

        vbox=QVBoxLayout()
        vbox.addWidget(clickbtn0)
        vbox.addWidget(clickbtn1)
        vbox.addWidget(clickbtn2)
        vbox.addWidget(clickbtn3)
        vbox.addWidget(clickbtn4)
        vbox.addWidget(clickbtn5)

        groupbox.setLayout(vbox)

        return groupbox

    def createLCTRgroup(self):
        groupbox=QGroupBox("소용량전송장치(LCTR)")

        # 시나리오 생성 버튼
        clickbtn0=QPushButton("시나리오 파일 생성")
        clickbtn0.setFixedHeight(self.SIZE)
        clickbtn0.clicked.connect(self.newScenBtnClicked)
        
        # csv 임포팅 버튼
        clickbtn1=QPushButton("시나리오 파일 열기")
        clickbtn1.setFixedHeight(self.SIZE)
        clickbtn1.clicked.connect(self.csvOpenBtnClicked)

        # "htz 분석 시작" 버튼
        clickbtn2 = QPushButton("커버리지 분석")
        clickbtn2.setFixedHeight(self.SIZE)
        clickbtn2.clicked.connect(self.covBtnClicked)

        # "링크 분석 시작" 버튼
        clickbtn3 = QPushButton("링크 연결성 분석")
        clickbtn3.setFixedHeight(self.SIZE)
        clickbtn3.clicked.connect(self.linkBtnClicked)
                
        # "중계소배치 시작" 버튼
        clickbtn4 = QPushButton("중계소 배치")
        clickbtn4.setFixedHeight(self.SIZE)
        clickbtn4.clicked.connect(self.nodeBtnClicked)

        # "주파수 할당 시작" 버튼
        clickbtn5 = QPushButton("주파수 할당")
        clickbtn5.setFixedHeight(self.SIZE)
        clickbtn5.clicked.connect(self.freqBtnClicked)

        vbox=QVBoxLayout()
        vbox.addWidget(clickbtn0)
        vbox.addWidget(clickbtn1)
        vbox.addWidget(clickbtn2)
        vbox.addWidget(clickbtn3)
        vbox.addWidget(clickbtn4)
        vbox.addWidget(clickbtn5)

        groupbox.setLayout(vbox)

        return groupbox

    def tblCellDblClicked(self):
        for currentQTableWidgetItem in self.tableWidget.selectedItems():
            print("row: {0}, col: {1}, contents: {2}".format(currentQTableWidgetItem.row(), currentQTableWidgetItem.column(), currentQTableWidgetItem.text()))
            currentQTableWidgetItem.setForeground(QBrush(QColor(255, 0, 0)))       
            
    def addNodeBtnClicked(self):
        self.tableWidget.insertRow(1)
        rowNum=self.tableWidget.rowCount()
        for i in range(1,self.tableWidget.rowCount()):
            for j in range(4,self.tableWidget.columnCount()):
                item=QTableWidgetItem(self.tableWidget.item(0,j))
                self.tableWidget.setItem(i, j, item)
                
    def delNodeBtnClicked(self):
        rowNum=self.tableWidget.rowCount()
        self.tableWidget.removeRow(rowNum-1)
        
    def dbsaveBtnClicked(self):
        
        #self.HTZDBconnect
        colCnt = self.tableWidget.columnCount()
        rowCnt = self.tableWidget.rowCount()
        headers = [str(self.tableWidget.horizontalHeaderItem(i).text()) for i in range(colCnt)]

        df_list = []
        for row in range(rowCnt):
            df_list2 = []
            for col in range(colCnt):
                table_item = self.tableWidget.item(row, col)
                df_list2.append('' if table_item is None else str(table_item.text()))
            df_list.append(df_list2)
        df = pd.DataFrame(df_list, columns=headers)
        
        conn = pypyodbc.connect(r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=./data/HTZtables.mdb;')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM STATIONX64')

        for row in range(rowCnt):            
            query = """INSERT INTO [STATIONX64]([ID], [CALL_SIGN], [ADDRESS], [COORD_X], [COORD_Y],
                                            [TYPE_COORD], [H_ANTENNA], [FREQUENCY], [BANDWIDTH], [BANDWIDTHRX],
                                            [AZIMUTH], [NOMINAL_POWER], [GAIN], [GAINRX], [LOSSES],
                                            [LOSSESRX], [Antenna_nameH], [Antenna_nameV], [THRESHOLD], [THRESHOLDRX],
                                            [Category], [TILT], [nfdname], [D_cx1], [D_cx2], [D_cx3], [D_cx4], 
                                            [D_cx5], [D_cx6], [D_cx7], [D_cx8], [D_cx9], [D_cx10], [D_cx11], [D_cx12], [D_cx13], [D_cx14], [D_cx15], [D_cx16],[Downlink_cx])
                    VALUES({0}, '{1}', '{2}', {3}, {4},
                            '{5}', {6}, {7}, {8}, {9},
                            {10}, {11}, {12}, {13}, {14},
                            {15}, '{16}', '{17}', {18}, {19},
                            {20}, {21}, '{22}', {23}, {24},
                            {25}, {26}, {27}, {28}, {29},
                            {30}, {31}, {32}, {33}, {34},
                            {35}, {36}, {37}, {38}, {39})""".format(
                            row, df.iloc[row]['부대명'], df.iloc[row]['그룹'], df.iloc[row]['경도'], df.iloc[row]['위도'],
                        df.iloc[row]['좌표계'], df.iloc[row]['안테나 높이 (m)'], df.iloc[row]['주파수 (MHz)'], df.iloc[row]['송신대역폭 (kHz)'], df.iloc[row]['수신대역폭 (kHz)'],
                        df.iloc[row]['방위각 (deg)'], df.iloc[row]['출력 (W)'], df.iloc[row]['송신 안테나 이득 (dB)'], df.iloc[row]['수신 안테나 이득 (dB)'], df.iloc[row]['송신 손실 (dB)'],
                        df.iloc[row]['수신 손실 (dB)'], df.iloc[row]['수평 안테나 패턴'], df.iloc[row]['수직 안테나 패턴'], df.iloc[row]['커버리지 수신감도 (dBu)'], df.iloc[row]['수신감도 (dBu)'],
                        df.iloc[row]['signal (category)'], df.iloc[row]['Tilt (deg)'], df.iloc[row]['nfd'],
                        df.iloc[row]['freqTx1'], df.iloc[row]['freqTx2'], df.iloc[row]['freqTx3'], df.iloc[row]['freqTx4'], df.iloc[row]['freqTx5'],
                        df.iloc[row]['freqTx6'], df.iloc[row]['freqTx7'], df.iloc[row]['freqTx8'], df.iloc[row]['freqTx9'], df.iloc[row]['freqTx10'],
                        df.iloc[row]['freqTx11'], df.iloc[row]['freqTx12'], df.iloc[row]['freqTx13'], df.iloc[row]['freqTx14'], df.iloc[row]['freqTx15'],
                        df.iloc[row]['freqTx16'], df.iloc[row]['Downlink_cx'])

            cursor.execute(query)
        
        cursor.commit()

        cursor.close()
        conn.close()
        
        #지도에 노드 생성
        m = folium.Map(location=[df.iloc[0, 3], df.iloc[0, 2]], zoom_start=11, tiles='Stamen Terrain')
        for i in range(len(df.index)):
            callSign = ''
            for j in range(0,4):
                if self.tableHdrLbl[j] == '부대명':
                    callSign = str(df.iloc[i, j])

                elif self.tableHdrLbl[j] == '경도':
                    lon = df.iloc[i, j]

                elif self.tableHdrLbl[j] == '위도':
                    lat = df.iloc[i, j]
                    
            folium.Marker([lat, lon], popup=callSign, icon=folium.Icon(icon='cloud')).add_to(m)

        m.save('C:/gui/result3.html')
        self.web.load(QUrl('C:/gui/result3.html'))

        
            
    def newScenBtnClicked(self):
        
        # rename col
        data.columns = ['부대명','그룹','경도','위도','좌표계','안테나 높이 (m)','주파수 (MHz)','송신대역폭 (kHz)','수신대역폭 (kHz)','방위각 (deg)','출력 (W)','송신 안테나 이득 (dB)','수신 안테나 이득 (dB)','송신 손실 (dB)','수신 손실 (dB)','수평 안테나 패턴','수직 안테나 패턴','커버리지 수신감도 (dBu)','수신감도 (dBu)','signal (category)','Tilt (deg)','nfd','freqTx1','freqTx2','freqTx3','freqTx4','freqTx5','freqTx6','freqTx7','freqTx8','freqTx9','freqTx10','freqTx11','freqTx12','freqTx13','freqTx14','freqTx15','freqTx16','Downlink_cx']

        self.tableHdrLbl = list(data.columns)
    
        self.tableWidget.setColumnCount(len(data.columns))
        self.tableWidget.setHorizontalHeaderLabels(self.tableHdrLbl)
        self.tableWidget.setRowCount(1)
        
        default_format = pd.read_csv('./csv/hctr_default.csv')
        m = folium.Map(location=[38, 128], zoom_start=10, tiles='Stamen Terrain') #노드 좌표 사용자 입력
        m.save('C:/gui/result2.html')
        self.web.load(QUrl('C:/gui/result2.html'))
        for i in range(len(default_format.index)):
            for j in range(4,len(default_format.columns)):
                self.tableWidget.setItem(i, j, QTableWidgetItem(str(default_format.iloc[i, j])))
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.tableWidget.takeItem(0,0)
        self.tableWidget.takeItem(0,1)
        self.tableWidget.takeItem(0,2)
        self.tableWidget.takeItem(0,3)

    def csvOpenBtnClicked(self):
        fname = QFileDialog.getOpenFileName(self, '파일 열기', '', 'csv(*.csv)')
        
        if fname[0]:
            data = pd.read_csv(fname[0])

            # rename col
            data.columns = ['부대명','그룹','경도','위도','좌표계','안테나 높이 (m)','주파수 (MHz)','송신대역폭 (kHz)','수신대역폭 (kHz)','방위각 (deg)','출력 (W)','송신 안테나 이득 (dB)','수신 안테나 이득 (dB)','송신 손실 (dB)','수신 손실 (dB)','수평 안테나 패턴','수직 안테나 패턴','커버리지 수신감도 (dBu)','수신감도 (dBu)','signal (category)','Tilt (deg)','nfd','freqTx1','freqTx2','freqTx3','freqTx4','freqTx5','freqTx6','freqTx7','freqTx8','freqTx9','freqTx10','freqTx11','freqTx12','freqTx13','freqTx14','freqTx15','freqTx16','Downlink_cx']

            self.tableHdrLbl = list(data.columns)
        
            self.tableWidget.setColumnCount(len(data.columns))
            self.tableWidget.setHorizontalHeaderLabels(self.tableHdrLbl)
            self.tableWidget.setRowCount(len(data.index))

            m = folium.Map(location=[data.iloc[0, 3], data.iloc[0, 2]], zoom_start=11, tiles='Stamen Terrain')
            for i in range(len(data.index)):
                callSign = ''
                lon = ''
                lat = ''
                for j in range(len(data.columns)):
                    if self.tableHdrLbl[j] == '부대명':
                        callSign = str(data.iloc[i, j])
                        self.tableWidget.setItem(i, j, QTableWidgetItem(callSign))
                    elif self.tableHdrLbl[j] == '경도':
                        lon = round(data.iloc[i, j], 6)
                        self.tableWidget.setItem(i, j, QTableWidgetItem(str(lon)))
                    elif self.tableHdrLbl[j] == '위도':
                        lat = round(data.iloc[i, j], 6)
                        self.tableWidget.setItem(i, j, QTableWidgetItem(str(lat)))
                    else:
                        self.tableWidget.setItem(i, j, QTableWidgetItem(str(data.iloc[i, j])))
                
                folium.Marker([lat, lon], popup=callSign, icon=folium.Icon(icon='cloud')).add_to(m)

            m.save('C:/gui/result.html')
            self.web.load(QUrl('C:/gui/result.html'))
            
            
            #self.HTZDBconnect
            colCnt = self.tableWidget.columnCount()
            rowCnt = self.tableWidget.rowCount()
            headers = [str(self.tableWidget.horizontalHeaderItem(i).text()) for i in range(colCnt)]

            df_list = []
            for row in range(rowCnt):
                df_list2 = []
                for col in range(colCnt):
                    table_item = self.tableWidget.item(row, col)
                    df_list2.append('' if table_item is None else str(table_item.text()))
                df_list.append(df_list2)
            df = pd.DataFrame(df_list, columns=headers)
            
            conn = pypyodbc.connect(r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=./data/HTZtables.mdb;')
            cursor = conn.cursor()
            cursor.execute('DELETE FROM STATIONX64')

            for row in range(rowCnt):            
                query = """INSERT INTO [STATIONX64]([ID], [CALL_SIGN], [ADDRESS], [COORD_X], [COORD_Y],
                                                [TYPE_COORD], [H_ANTENNA], [FREQUENCY], [BANDWIDTH], [BANDWIDTHRX],
                                                [AZIMUTH], [NOMINAL_POWER], [GAIN], [GAINRX], [LOSSES],
                                                [LOSSESRX], [Antenna_nameH], [Antenna_nameV], [THRESHOLD], [THRESHOLDRX],
                                                [Category], [TILT], [nfdname], [D_cx1], [D_cx2], [D_cx3], [D_cx4], 
                                                [D_cx5], [D_cx6], [D_cx7], [D_cx8], [D_cx9], [D_cx10], [D_cx11], [D_cx12], [D_cx13], [D_cx14], [D_cx15], [D_cx16],[Downlink_cx])
                        VALUES({0}, '{1}', '{2}', {3}, {4},
                                '{5}', {6}, {7}, {8}, {9},
                                {10}, {11}, {12}, {13}, {14},
                                {15}, '{16}', '{17}', {18}, {19},
                                {20}, {21}, '{22}', {23}, {24},
                                {25}, {26}, {27}, {28}, {29},
                                {30}, {31}, {32}, {33}, {34},
                                {35}, {36}, {37}, {38}, {39})""".format(
                             row, df.iloc[row]['부대명'], df.iloc[row]['그룹'], df.iloc[row]['경도'], df.iloc[row]['위도'],
                           df.iloc[row]['좌표계'], df.iloc[row]['안테나 높이 (m)'], df.iloc[row]['주파수 (MHz)'], df.iloc[row]['송신대역폭 (kHz)'], df.iloc[row]['수신대역폭 (kHz)'],
                           df.iloc[row]['방위각 (deg)'], df.iloc[row]['출력 (W)'], df.iloc[row]['송신 안테나 이득 (dB)'], df.iloc[row]['수신 안테나 이득 (dB)'], df.iloc[row]['송신 손실 (dB)'],
                           df.iloc[row]['수신 손실 (dB)'], df.iloc[row]['수평 안테나 패턴'], df.iloc[row]['수직 안테나 패턴'], df.iloc[row]['커버리지 수신감도 (dBu)'], df.iloc[row]['수신감도 (dBu)'],
                           df.iloc[row]['signal (category)'], df.iloc[row]['Tilt (deg)'], df.iloc[row]['nfd'],
                           df.iloc[row]['freqTx1'], df.iloc[row]['freqTx2'], df.iloc[row]['freqTx3'], df.iloc[row]['freqTx4'], df.iloc[row]['freqTx5'],
                           df.iloc[row]['freqTx6'], df.iloc[row]['freqTx7'], df.iloc[row]['freqTx8'], df.iloc[row]['freqTx9'], df.iloc[row]['freqTx10'],
                           df.iloc[row]['freqTx11'], df.iloc[row]['freqTx12'], df.iloc[row]['freqTx13'], df.iloc[row]['freqTx14'], df.iloc[row]['freqTx15'],
                           df.iloc[row]['freqTx16'], df.iloc[row]['Downlink_cx'])

                cursor.execute(query)
            
            cursor.commit()

            cursor.close()
            conn.close()
        else:
            QMessageBox.about(self, 'Info', '파일을 선택하지 않았습니다.')

        ##path = os.path.realpath('.\\data')
        ## os.startfile(path)

    def covBtnClicked(self):
        print('covBtnClicked()')
        os.system(".\\batch\\Coverage.bat")

    def linkBtnClicked(self):
        print('linkBtnClicked')
        os.system(".\\batch\\P2P.bat")

    def nodeBtnClicked(self):
        print('nodeBtnClicked')
        os.system(".\\batch\\Nodes.bat")

    def freqBtnClicked(self):
        print('freqBtnClicked')
        os.system(".\\batch\\freq_p2p.bat")

    def exitBtnClicked(self):
        reply = QMessageBox.question(self, "종료", "프로그램을 종료하시겠습니까?", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            sys.exit()

    def testBtnClicked(self):
        kml_file='./img/123.kml'
        doc=ET.parse(kml_file)
        root=doc.getroot()
        for position in root.findall('LatLonBox'):
            corner_top=position.find('north').text
            corner_low=position.find('south').text
            corner_right=position.find('east').text
            corner_left=position.find('west').text
        print(corner_low)
        print(corner_top)
        print(corner_right)
        print(corner_left)
        # center_tag=root.findall("LatLonBox")
        # corner_low=center_tag.find("south").text
        # corner_top=center_tag.find("north").text
        # corner_right=center_tag.find("east").text
        # corner_left=center_tag.find("west").text
        center_y=round((corner_top+corner_low)/2,5)
        center_x=round((corner_left+corner_right)/2,5)
        # m2 = folium.Map([center_y,center_x], zoom_start=11, tiles='Stamen Terrain') 
        m2 = folium.Map([36.5,127.5], zoom_start=11, tiles='Stamen Terrain')
        folium.raster_layers.ImageOverlay(
            image="./img/123.png",
            name="coverage",
            bounds=[[corner_low, corner_left], [corner_top, corner_right]],
            opacity=1,
            interactive=False,
            cross_origin=False,
            zindex=1,
            #alt="1234.png",
        ).add_to(m2)

        folium.LayerControl().add_to(m2)

        m2.save('C:/gui/result.html')
        self.web.load(QUrl('C:/gui/result.html'))

