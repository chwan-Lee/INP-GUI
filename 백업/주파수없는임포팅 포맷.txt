    def csvOpenBtnClicked(self):
        fname = QFileDialog.getOpenFileName(self, '파일 열기', '', 'csv(*.csv)')
        
        if fname[0]:
            data = pd.read_csv(fname[0])

            # rename col
            #data.columns = ['CALL_SIGN', 'ADDRESS', 'COORD_X', 'COORD_Y', 'TYPE_COORD', 'H_ANTENNA', 'FREQUENCY', 'BANDWIDTH', 'BANDWIDTHRX', 'AZIMUTH', 'NOMINAL_POWER', 'GAIN', 'GAINRX', 'LOSSES', 'LOSSESRX', 'WiencodeH', 'WiencodeV', 'THRESHOLD', 'THRESHOLDRX']
            data.columns = ['Callsign','Address','Xo','Yo','CodeOut','Antenna (m)','Frequency MHz','Tx bandwidth kHz','Rx bandwidth kHz','Azimuth (deg)','Nominal power (W)','Tx antenna gain (dB)','Rx antenna gain (dB)','Tx losses (dB)','Rx losses (dB)','Pattern H','Pattern V','Coverage threshold (dBm)','Rx threshold (dBm)','signal (category)','Tilt (deg)','nfd']
            #data['Antenna_nameH'] = data['WiencodeH']
            #data['Antenna_nameV'] = data['WiencodeV']
            self.tableHdrLbl = list(data.columns)
        
            self.tableWidget.setColumnCount(len(data.columns))
            self.tableWidget.setHorizontalHeaderLabels(self.tableHdrLbl)
            self.tableWidget.setRowCount(len(data.index))

            m = folium.Map(location=[data.iloc[0, 3], data.iloc[0, 2]], zoom_start=11, tiles='Stamen Terrain')
            for i in range(len(data.index)):
                callSign = ''
                lon = ''
                lat = ''
                for j in range(len(data.columns)):
                    if self.tableHdrLbl[j] == 'Callsign':
                        callSign = str(data.iloc[i, j])
                        self.tableWidget.setItem(i, j, QTableWidgetItem(callSign))
                    elif self.tableHdrLbl[j] == 'Xo':
                        lon = round(data.iloc[i, j], 6)
                        self.tableWidget.setItem(i, j, QTableWidgetItem(str(lon)))
                    elif self.tableHdrLbl[j] == 'Yo':
                        lat = round(data.iloc[i, j], 6)
                        self.tableWidget.setItem(i, j, QTableWidgetItem(str(lat)))
                    else:
                        self.tableWidget.setItem(i, j, QTableWidgetItem(str(data.iloc[i, j])))
                
                folium.Marker([lat, lon], popup=callSign, icon=folium.Icon(icon='cloud')).add_to(m)

            m.save('C:/gui/result.html')
            self.web.load(QUrl('C:/gui/result.html'))
        else:
            QMessageBox.about(self, 'Info', '파일을 선택하지 않았습니다.')

        colCnt = self.tableWidget.columnCount()
        rowCnt = self.tableWidget.rowCount()
        headers = [str(self.tableWidget.horizontalHeaderItem(i).text()) for i in range(colCnt)]

        df_list = []
        for row in range(rowCnt):
            df_list2 = []
            for col in range(colCnt):
                table_item = self.tableWidget.item(row, col)
                df_list2.append('' if table_item is None else str(table_item.text()))
            df_list.append(df_list2)
        df = pd.DataFrame(df_list, columns=headers)
        

        conn = pypyodbc.connect(r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=./data/HTZtables.mdb;')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM STATIONX64')

        for row in range(rowCnt):
            query = """INSERT INTO [STATIONX64]([ID], [CALL_SIGN], [ADDRESS], [COORD_X], [COORD_Y],
                                              [TYPE_COORD], [H_ANTENNA], [FREQUENCY], [BANDWIDTH], [BANDWIDTHRX],
                                              [AZIMUTH], [NOMINAL_POWER], [GAIN], [GAINRX], [LOSSES],
                                              [LOSSESRX], [Antenna_nameH], [Antenna_nameV], [THRESHOLD], [THRESHOLDRX],
                                              [Category], [TILT], [nfdname])
                       VALUES({0}, '{1}', '{2}', {3}, {4},
                             '{5}', {6}, {7}, {8}, {9},
                             {10}, {11}, {12}, {13}, {14},
                             {15}, '{16}', '{17}', {18}, {19},
                             {20}, {21}, '{22}')""".format(
                           row, df.iloc[row]['Callsign'], df.iloc[row]['Address'], df.iloc[row]['Xo'], df.iloc[row]['Yo'],
                           df.iloc[row]['CodeOut'], df.iloc[row]['Antenna (m)'], df.iloc[row]['Frequency MHz'], df.iloc[row]['Tx bandwidth kHz'], df.iloc[row]['Rx bandwidth kHz'],
                           df.iloc[row]['Azimuth (deg)'], df.iloc[row]['Nominal power (W)'], df.iloc[row]['Tx antenna gain (dB)'], df.iloc[row]['Rx antenna gain (dB)'], df.iloc[row]['Tx losses (dB)'],
                           df.iloc[row]['Rx losses (dB)'], df.iloc[row]['Pattern H'], df.iloc[row]['Pattern V'], df.iloc[row]['Coverage threshold (dBm)'], df.iloc[row]['Rx threshold (dBm)'],
                           df.iloc[row]['signal (category)'], df.iloc[row]['Tilt (deg)'], df.iloc[row]['nfd'])

            cursor.execute(query)
        
        cursor.commit()

        cursor.close()
        conn.close()

        ##path = os.path.realpath('.\\data')
        ## os.startfile(path)